# -*- coding: utf-8 -*-
"""2.0-Handling Imbalanced dataset.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/12e7KO2AzuE4p5OPHnAslShBXukPYCp1Q

## Imbalanced Dataset Handling
1. Upsampling
2. Down Sampling
"""

import numpy as np
import pandas as pd

# Set the random seed for reproducibility
np.random.seed(123)

# Create a dataframe with two classes
n_samples = 1000
class_0_ratio = 0.9
n_class_0 = int(n_samples * class_0_ratio)
n_class_1 = n_samples - n_class_0

n_class_0,n_class_1

class_0 = pd.DataFrame({
    'feature_1': np.random.normal(loc=0, scale=1, size=n_class_0),
    'feature_2': np.random.normal(loc=0, scale=1, size=n_class_0),
    'target': [0] * n_class_0
})

class_1 = pd.DataFrame({
    'feature_1': np.random.normal(loc=2, scale=1, size=n_class_1),
    'feature_2': np.random.normal(loc=2, scale=1, size=n_class_1),
    'target': [1] * n_class_1
})

df=pd.concat([class_0,class_1]).reset_index(drop=True)

df.head()

df['target'].value_counts()

"""## Upsampling"""

df_minority=df[df['target']==1]
df_majority=df[df['target']==0]

df_minority.head()

df_majority.head()

##Upsampling perform
from sklearn.utils import resample

df_minority_upsample=resample(df_minority,
                             replace=True, ## Sample With replacement
                              n_samples=len(df_majority), # to match the majority class)
                              random_state=42
                             )

df_minority_upsample.shape

df_minority_upsample.shape

df_minority_upsample['target'].value_counts()

df_upsampled= pd.concat([df_majority,df_minority_upsample])

df_upsampled['target'].value_counts()

df_upsampled.shape

"""## DownSampling"""

class_0 = pd.DataFrame({
    'feature_1': np.random.normal(loc=0, scale=1, size=n_class_0),
    'feature_2': np.random.normal(loc=0, scale=1, size=n_class_0),
    'target': [0] * n_class_0
})

class_1 = pd.DataFrame({
    'feature_1': np.random.normal(loc=2, scale=1, size=n_class_1),
    'feature_2': np.random.normal(loc=2, scale=1, size=n_class_1),
    'target': [1] * n_class_1
})

df=pd.concat([class_0,class_1]).reset_index(drop=True)

df_minority=df[df['target']==1]
df_majority=df[df['target']==0]

df_majority_downsample=resample(df_majority,
                             replace=False, ## Sample Without replacement
                              n_samples=len(df_minority), # to match the minority class)
                              random_state=42
                             )

df_majority_downsample.shape

df_downsample=pd.concat([df_minority,df_majority_downsample])

df_downsample['target'].value_counts()

